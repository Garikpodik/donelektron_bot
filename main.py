import asyncio
import logging
import uuid
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton


logging.basicConfig(level=logging.INFO)

TOKEN = "8033257118:AAGhrKz6zfvta_YjB8yCb4L01isfyOJ4GnA"

ADMIN_CHAT_ID = "453926083"


DB_NAME = "applications.db"

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É applications, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS applications (
            id TEXT PRIMARY KEY,
            user_id TEXT NOT NULL,
            name TEXT NOT NULL,
            phone TEXT NOT NULL,
            address TEXT NOT NULL,
            service_type TEXT NOT NULL,
            description TEXT,
            time TEXT NOT NULL,
            status TEXT NOT NULL DEFAULT '–ù–æ–≤–∞—è'
        )
    """)
    conn.commit()
    conn.close()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

def save_application_to_db(app_data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO applications (id, user_id, name, phone, address, service_type, description, time, status)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        app_data["id"],
        app_data["user_id"],
        app_data["name"],
        app_data["phone"],
        app_data["address"],
        app_data["service_type"],
        app_data["description"],
        app_data["time"],
        app_data["status"]
    ))
    conn.commit()
    conn.close()
    logging.info(f"–ó–∞—è–≤–∫–∞ ID {app_data['id']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î.")

def get_all_applications_from_db():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, user_id, name, phone, address, service_type, description, time, status FROM applications ORDER BY id DESC")
    rows = cursor.fetchall()
    conn.close()

    applications = {}
    for row in rows:
        app_id, user_id, name, phone, address, service_type, description, time, status = row
        applications[app_id] = {
            "id": app_id,
            "user_id": user_id,
            "name": name,
            "phone": phone,
            "address": address,
            "service_type": service_type,
            "description": description,
            "time": time,
            "status": status
        }
    return applications

def get_application_by_id_from_db(app_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –∑–∞—è–≤–∫—É –ø–æ –µ–µ ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, user_id, name, phone, address, service_type, description, time, status FROM applications WHERE id = ?", (app_id,))
    row = cursor.fetchone()
    conn.close()

    if row:
        app_id, user_id, name, phone, address, service_type, description, time, status = row
        return {
            "id": app_id,
            "user_id": user_id,
            "name": name,
            "phone": phone,
            "address": address,
            "service_type": service_type,
            "description": description,
            "time": time,
            "status": status
        }
    return None

def update_application_status_in_db(app_id: str, new_status: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE applications SET status = ? WHERE id = ?", (new_status, app_id))
    conn.commit()
    conn.close()
    logging.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ID {app_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'.")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    waiting_for_service_type = State()
    waiting_for_description = State()
    waiting_for_time = State()

class AdminStates(StatesGroup):
    viewing_applications = State()
    changing_status = State()

class ClientStates(StatesGroup):
    main_menu = State()
    viewing_client_applications = State()


bot = Bot(token=TOKEN)
dp = Dispatcher()


def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É")],
            [KeyboardButton(text="üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_phone_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_service_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé• –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ"), KeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è")],
            [KeyboardButton(text="üîê –°–ö–£–î"), KeyboardButton(text="‚ùî –î—Ä—É–≥–æ–µ")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_time_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="09:00-10:00"), KeyboardButton(text="10:00-11:00")],
            [KeyboardButton(text="11:00-12:00"), KeyboardButton(text="12:00-13:00")],
            [KeyboardButton(text="13:00-14:00"), KeyboardButton(text="14:00-15:00")],
            [KeyboardButton(text="15:00-16:00"), KeyboardButton(text="16:00-17:00")],
            [KeyboardButton(text="17:00-18:00")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_back_keyboard():
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_client_applications_list_keyboard(client_applications: list):
    """
    Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    if not client_applications:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", callback_data="no_client_apps")]])

    buttons = []
    for app_id, app_data in client_applications:
        status_emoji = {
            "–ù–æ–≤–∞—è": "üÜï",
            "–í —Ä–∞–±–æ—Ç–µ": "‚öôÔ∏è",
            "–ó–∞–≤–µ—Ä—à–µ–Ω–∞": "‚úÖ",
            "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞": "‚ùå"
        }.get(app_data.get("status", "–ù–æ–≤–∞—è"), "‚ùî")
        buttons.append([InlineKeyboardButton(text=f"{status_emoji} {app_data['service_type']} –æ—Ç {app_data['time']}", callback_data=f"view_client_app_{app_id}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)



def get_admin_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_application_list_keyboard(applications_page: list):
    if not applications_page:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–µ—Ç –∑–∞—è–≤–æ–∫", callback_data="no_applications")]])
    buttons = []
    for app_id, app_data in applications_page:
        status_emoji = {
            "–ù–æ–≤–∞—è": "üÜï",
            "–í —Ä–∞–±–æ—Ç–µ": "‚öôÔ∏è",
            "–ó–∞–≤–µ—Ä—à–µ–Ω–∞": "‚úÖ",
            "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞": "‚ùå"
        }.get(app_data.get("status", "–ù–æ–≤–∞—è"), "‚ùî")
        buttons.append([InlineKeyboardButton(text=f"{status_emoji} {app_data['name']} - {app_data['service_type']}", callback_data=f"view_app_{app_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_application_details_keyboard(app_id: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{app_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_app_list")]
    ])
    return keyboard

def get_status_change_keyboard(app_id: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤–∞—è üÜï", callback_data=f"set_status_{app_id}_–ù–æ–≤–∞—è")],
        [InlineKeyboardButton(text="–í —Ä–∞–±–æ—Ç–µ ‚öôÔ∏è", callback_data=f"set_status_{app_id}_–í —Ä–∞–±–æ—Ç–µ")],
        [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", callback_data=f"set_status_{app_id}_–ó–∞–≤–µ—Ä—à–µ–Ω–∞")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå", callback_data=f"set_status_{app_id}_–û—Ç–∫–ª–æ–Ω–µ–Ω–∞")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"view_app_{app_id}")]
    ])
    return keyboard




@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(ClientStates.main_menu)



@dp.message(F.text == "üìù –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", StateFilter(ClientStates.main_menu))
async def start_new_application(message: types.Message, state: FSMContext):
    await message.answer(
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å (–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è):",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_name)

@dp.message(OrderStates.waiting_for_name, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_name(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
    await state.set_state(ClientStates.main_menu)

@dp.message(OrderStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ "
        "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=get_phone_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_phone)

@dp.message(OrderStates.waiting_for_phone, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_phone(message: types.Message, state: FSMContext):
    await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏:", reply_markup=get_back_keyboard())
    await state.set_state(OrderStates.waiting_for_name)

@dp.message(OrderStates.waiting_for_phone, F.contact)
async def process_phone_by_contact(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞/–æ—Ñ–∏—Å):",
                         reply_markup=get_back_keyboard())
    await state.set_state(OrderStates.waiting_for_address)

@dp.message(OrderStates.waiting_for_phone)
async def process_phone_by_text(message: types.Message, state: FSMContext):
    if not message.text.replace('+', '').isdigit() and not (message.text.startswith('+') and message.text[1:].isdigit()):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É.")
        return

    await state.update_data(phone=message.text)
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞/–æ—Ñ–∏—Å):",
                         reply_markup=get_back_keyboard())
    await state.set_state(OrderStates.waiting_for_address)

@dp.message(OrderStates.waiting_for_address, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —Å —ç—Ç–∞–ø–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞."""
    await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=get_phone_keyboard())
    await state.set_state(OrderStates.waiting_for_phone)

@dp.message(OrderStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–ê–¥—Ä–µ—Å –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:",
                         reply_markup=get_service_type_keyboard())
    await state.set_state(OrderStates.waiting_for_service_type)

@dp.message(OrderStates.waiting_for_service_type, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_service_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —Å —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏."""
    await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞:", reply_markup=get_back_keyboard())
    await state.set_state(OrderStates.waiting_for_address)

@dp.message(OrderStates.waiting_for_service_type)
async def process_service_type(message: types.Message, state: FSMContext):
    allowed_services = ["üé• –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", "üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è", "üîê –°–ö–£–î", "‚ùî –î—Ä—É–≥–æ–µ"]
    if message.text not in allowed_services:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return

    await state.update_data(service_type=message.text)
    await message.answer("–¢–∏–ø —É—Å–ª—É–≥–∏ –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞—á—É:",
                         reply_markup=get_back_keyboard())
    await state.set_state(OrderStates.waiting_for_description)

@dp.message(OrderStates.waiting_for_description, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —Å —ç—Ç–∞–ø–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è."""
    await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏:", reply_markup=get_service_type_keyboard())
    await state.set_state(OrderStates.waiting_for_service_type)

@dp.message(OrderStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
                         reply_markup=get_time_keyboard())
    await state.set_state(OrderStates.waiting_for_time)

@dp.message(OrderStates.waiting_for_time, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —Å —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è:", reply_markup=get_back_keyboard())
    await state.set_state(OrderStates.waiting_for_description)

@dp.message(OrderStates.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    allowed_times = [
        "09:00-10:00", "10:00-11:00", "11:00-12:00", "12:00-13:00",
        "13:00-14:00", "14:00-15:00", "15:00-16:00", "16:00-17:00",
        "17:00-18:00"
    ]
    if message.text not in allowed_times:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return

    await state.update_data(time=message.text)
    user_data = await state.get_data()
    user_id = str(message.from_user.id)

    application_id = str(uuid.uuid4())[:8]

    application_data = {
        "id": application_id,
        "user_id": user_id,
        "name": user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        "phone": user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        "address": user_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        "service_type": user_data.get('service_type', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
        "description": user_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
        "time": user_data.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        "status": "–ù–æ–≤–∞—è"
    }
    save_application_to_db(application_data)

    admin_message = (
        f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (ID: {application_id})\n"
        f"üë§ –ò–º—è: {application_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {application_data['phone']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {application_data['address']}\n"
        f"üîß –£—Å–ª—É–≥–∞: {application_data['service_type']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {application_data['description']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {application_data['time']}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {application_data['status']}"
    )

    try:
        await bot.send_message(ADMIN_CHAT_ID, admin_message)
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
                             reply_markup=get_main_menu_keyboard())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=get_main_menu_keyboard())

    await state.clear()
    await state.set_state(ClientStates.main_menu)




@dp.message(F.text == "üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏", StateFilter(ClientStates.main_menu))
async def show_client_applications(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    all_applications = get_all_applications_from_db()
    client_applications = []
    for app_id, app_data in all_applications.items():
        if app_data.get("user_id") == user_id:
            client_applications.append((app_id, app_data))

    if not client_applications:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=get_main_menu_keyboard())
        await state.set_state(ClientStates.main_menu)
        return

    await message.answer(
        "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:",
        reply_markup=get_client_applications_list_keyboard(client_applications)
    )
    await state.set_state(ClientStates.viewing_client_applications)

@dp.callback_query(F.data.startswith("view_client_app_"), StateFilter(ClientStates.viewing_client_applications))
async def view_client_application_details(callback_query: types.CallbackQuery, state: FSMContext):
    app_id = callback_query.data.split("_")[3]
    app_data = get_application_by_id_from_db(app_id)
    user_id = str(callback_query.from_user.id)

    if not app_data or app_data.get("user_id") != user_id:
        await callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
        return

    status_emoji = {
        "–ù–æ–≤–∞—è": "üÜï",
        "–í —Ä–∞–±–æ—Ç–µ": "‚öôÔ∏è",
        "–ó–∞–≤–µ—Ä—à–µ–Ω–∞": "‚úÖ",
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞": "‚ùå"
    }.get(app_data.get("status", "–ù–æ–≤–∞—è"), "‚ùî")

    details_message = (
        f"**–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ (ID: `{app_id}`)**\n"
        f"üîß –£—Å–ª—É–≥–∞: {app_data.get('service_type', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {app_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {app_data.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {app_data.get('status', '–ù–æ–≤–∞—è')}\n\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {app_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–ü–æ –∞–¥—Ä–µ—Å—É: {app_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    )

    await callback_query.message.edit_text(
        details_message,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –∑–∞—è–≤–∫–∞–º", callback_data="back_to_client_app_list")]]),
        parse_mode="Markdown"
    )
    await callback_query.answer()

@dp.callback_query(F.data == "back_to_client_app_list", StateFilter(ClientStates.viewing_client_applications))
async def back_to_client_app_list_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await show_client_applications(callback_query.message, state)



@dp.message(Command("admin"))
async def admin_command(message: types.Message, state: FSMContext):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_admin_main_keyboard()
    )
    await state.set_state(AdminStates.viewing_applications)

@dp.message(F.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", StateFilter(AdminStates.viewing_applications))
async def show_applications_list(message: types.Message, state: FSMContext):
    all_applications = get_all_applications_from_db()
    if not all_applications:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=get_admin_main_keyboard())
        return

    applications_for_display = []
    for app_id, app_data in all_applications.items():
        applications_for_display.append((app_id, app_data))

    await message.answer(
        "–¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏:",
        reply_markup=get_application_list_keyboard(applications_for_display)
    )

@dp.callback_query(F.data.startswith("view_app_"), StateFilter(AdminStates.viewing_applications))
async def view_application_details(callback_query: types.CallbackQuery, state: FSMContext):
    app_id = callback_query.data.split("_")[2]
    app_data = get_application_by_id_from_db(app_id)

    if not app_data:
        await callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    status_emoji = {
        "–ù–æ–≤–∞—è": "üÜï",
        "–í —Ä–∞–±–æ—Ç–µ": "‚öôÔ∏è",
        "–ó–∞–≤–µ—Ä—à–µ–Ω–∞": "‚úÖ",
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞": "‚ùå"
    }.get(app_data.get("status", "–ù–æ–≤–∞—è"), "‚ùî")

    details_message = (
        f"**–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ID: `{app_id}`**\n"
        f"üë§ –ò–º—è: {app_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {app_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üîß –£—Å–ª—É–≥–∞: {app_data.get('service_type', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {app_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {app_data.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {app_data.get('status', '–ù–æ–≤–∞—è')}"
    )

    await callback_query.message.edit_text(
        details_message,
        reply_markup=get_application_details_keyboard(app_id),
        parse_mode="Markdown"
    )
    await callback_query.answer()

@dp.callback_query(F.data.startswith("change_status_"), StateFilter(AdminStates.viewing_applications, AdminStates.changing_status))
async def prompt_change_status(callback_query: types.CallbackQuery, state: FSMContext):
    app_id = callback_query.data.split("_")[2]


    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞—è–≤–∫–∏ ID: `{app_id}`",
        reply_markup=get_status_change_keyboard(app_id),
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.changing_status)
    await callback_query.answer()

@dp.callback_query(F.data.startswith("set_status_"), StateFilter(AdminStates.changing_status))
async def set_application_status(callback_query: types.CallbackQuery, state: FSMContext):

    _, _, app_id, new_status = callback_query.data.split("_", 3)

    if get_application_by_id_from_db(app_id):
        update_application_status_in_db(app_id, new_status)


        app_data_updated = get_application_by_id_from_db(app_id)

        await callback_query.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ID `{app_id}` –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'", show_alert=True)

        # Reconstruct the message content with the new status
        status_emoji = {
            "–ù–æ–≤–∞—è": "üÜï",
            "–í —Ä–∞–±–æ—Ç–µ": "‚öôÔ∏è",
            "–ó–∞–≤–µ—Ä—à–µ–Ω–∞": "‚úÖ",
            "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞": "‚ùå"
        }.get(app_data_updated.get("status", "–ù–æ–≤–∞—è"), "‚ùî")

        details_message = (
            f"**–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ID: `{app_id}`**\n"
            f"üë§ –ò–º—è: {app_data_updated.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app_data_updated.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üè† –ê–¥—Ä–µ—Å: {app_data_updated.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üîß –£—Å–ª—É–≥–∞: {app_data_updated.get('service_type', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {app_data_updated.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {app_data_updated.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {app_data_updated.get('status', '–ù–æ–≤–∞—è')}"
        )


        await callback_query.message.edit_text(
            details_message,
            reply_markup=get_application_details_keyboard(app_id),
            parse_mode="Markdown"
        )


        client_id = app_data_updated.get("user_id")
        if client_id:
            try:
                await bot.send_message(
                    client_id,
                    f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ '{app_data_updated['service_type']}' (ID: `{app_id}`) –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: **{new_status}**",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")


        await state.set_state(AdminStates.viewing_applications)

    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

        await state.set_state(AdminStates.viewing_applications)
        await show_applications_list(callback_query.message, state)


@dp.callback_query(F.data == "back_to_app_list", StateFilter(AdminStates.viewing_applications))
async def back_to_app_list(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await show_applications_list(callback_query.message, state)

@dp.message(F.text == "‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", StateFilter(AdminStates))
async def exit_admin_panel(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
    await state.set_state(ClientStates.main_menu)


@dp.message(F.text, ~StateFilter(
    OrderStates.waiting_for_name,
    OrderStates.waiting_for_phone,
    OrderStates.waiting_for_address,
    OrderStates.waiting_for_service_type,
    OrderStates.waiting_for_description,
    OrderStates.waiting_for_time
), ~Command("admin"))
async def handle_unrecognized_text(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state and current_state.startswith("AdminStates"):
        return

    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(ClientStates.main_menu)


async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())